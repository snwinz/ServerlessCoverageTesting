package logic.sourcecodeanalyzer;

import antlr.autogenerated.JavaScriptLexer;
import antlr.autogenerated.JavaScriptParser;
import logic.model.LogicGraph;
import logic.model.SourceCode;
import logic.model.SourceCodeLine;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.gui.TreeViewer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public record Analyzer(boolean adaptForDeletes) {

    public String getSuggestionForInstrumentation(String sourceAsJSON, String graphAsJSON) {
        SourceCode sourceCode = SourceCode.getSourceCodeObject(sourceAsJSON);
        LogicGraph logicGraph = new LogicGraph(graphAsJSON);
        logicGraph.addRelationsToElements();
        List<SourceCodeLine> lines = sourceCode.getSourceCode();

        List<SourceCodeLine> copyWithLinesOnly = lines.stream().
                map(line -> {
                    var sourceLine = new SourceCodeLine();
                    sourceLine.setSourceLine(line.getSourceLine());
                    sourceLine.setLineNumber(line.getLineNumber());
                    return sourceLine;
                })
                .collect(Collectors.toCollection(ArrayList::new));


        String textOfSourceFile = copyWithLinesOnly.stream().map(SourceCodeLine::getSourceLine).collect(Collectors.joining("\n"));


        JavaScriptLexer lexer = new JavaScriptLexer(new ANTLRInputStream(textOfSourceFile));
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        JavaScriptParser parser = new JavaScriptParser(tokens);
        ParserRuleContext program = parser.program();


        InstrumentationIdentifier<Object> visitor = new InstrumentationIdentifier<>(copyWithLinesOnly, logicGraph, sourceCode.getIdOfNode(), adaptForDeletes);
        visitor.visit(program);
        SourceCode analyzedSourceCode = new SourceCode(copyWithLinesOnly);
        analyzedSourceCode.setIdOfNode(sourceCode.getIdOfNode());


        TreeViewer viewer = new TreeViewer(Arrays.asList(
                parser.getRuleNames()), program);
        viewer.open();


        return analyzedSourceCode.getJSON();
    }
}
