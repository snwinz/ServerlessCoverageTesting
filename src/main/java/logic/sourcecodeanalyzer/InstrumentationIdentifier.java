package logic.sourcecodeanalyzer;

import antlr.autogenerated.JavaScriptParser;
import antlr.autogenerated.JavaScriptParser.ArgumentContext;
import antlr.autogenerated.JavaScriptParser.IdentifierContext;
import antlr.autogenerated.JavaScriptParser.StatementContext;
import antlr.autogenerated.JavaScriptParserBaseVisitor;
import shared.model.AccessMode;
import logic.model.LogicGraph;
import shared.model.NodeType;
import logic.model.SourceCodeLine;
import org.antlr.v4.runtime.tree.ParseTree;

import java.util.*;

public class InstrumentationIdentifier<T> extends JavaScriptParserBaseVisitor<T> {

    private final List<SourceCodeLine> lines;
    private final LogicGraph graph;
    private final Long idOfNode;
    private final Map<String, StatementContext> useVariablesOfEvents = new HashMap<>();
    private final Map<String, StatementContext> useVariablesOfReads = new HashMap<>();
    private final Map<String, StatementContext> useVariablesOfReturns = new HashMap<>();
    public final DefManager defManager = new DefManager();
    private final boolean adaptForDeletes;

    public InstrumentationIdentifier(List<SourceCodeLine> lines, LogicGraph logicGraph, Long idOfNode, boolean adaptForDeletes) {
        super();
        this.lines = lines;
        this.graph = logicGraph;
        this.idOfNode = idOfNode;
        this.adaptForDeletes = adaptForDeletes;
    }

    @Override
    public T visitStatement(StatementContext ctx) {
        if (ctx.getText().startsWith("exports")) {
            StatementContext firstLineOfLambda = GraphHelper.getNextStatement(ctx);
            ParseTree event = GraphHelper.getNextFormalParameterArg(ctx);
            if (event != null && firstLineOfLambda != null) {
                useVariablesOfEvents.put(event.getText(), ctx);
                SourceCodeLine sourceCodeLine = getStartSourceCodeLineForContext(firstLineOfLambda);
                sourceCodeLine.addNodeCoveredByStatement(idOfNode);
            }
        }

        String invocationFunctionName = "invoke";
        if (ctx.getText().contains(invocationFunctionName)) {
            if (GraphHelper.checkIfFunctionIsInvoked(ctx, invocationFunctionName)) {
                ArgumentContext lambdaParameter = GraphHelper.getFirstArgument(ctx);
                String returnParameter = GraphHelper.getReturnVariableOfFunctionInvocation(ctx);
                useVariablesOfReturns.put(returnParameter, ctx);
                if (lambdaParameter != null) {
                    addDefinitionForFunctionCall(lambdaParameter.getText());
                    addRelationsCoveredFunctionCall(ctx);
                }
            }
        }

        String dbReadFunctionName = "getItem";
        if (ctx.getText().contains(dbReadFunctionName)) {
            if (GraphHelper.checkIfFunctionIsInvoked(ctx, dbReadFunctionName)) {
                ArgumentContext accessParameter = GraphHelper.getFirstArgument(ctx);
                String returnParameter = GraphHelper.getReturnVariableOfFunctionInvocation(ctx);
                useVariablesOfReads.put(returnParameter, ctx);
                if (accessParameter != null) {
                    addDependenciesForNodeType(ctx);
                }
            }
        }
        String dbWriteFunctionName = "putItem";
        if (ctx.getText().contains(dbWriteFunctionName)) {
            if (GraphHelper.checkIfFunctionIsInvoked(ctx, dbWriteFunctionName)) {
                ArgumentContext writeParameter = GraphHelper.getFirstArgument(ctx);
                if (writeParameter != null) {
                    addDefsForWrite(writeParameter.getText());
                    addDependenciesForNodeType(ctx);
                }
            }
        }

        if (ctx.getText().startsWith("callback")) {
            if (GraphHelper.isStatementCallback(ctx)) {
                ArgumentContext returnVariable = GraphHelper.getSecondArgument(ctx, false);
                if (returnVariable != null) {
                    addDefsForCallbacks(returnVariable.getText());
                    addNodesAndRelationsCoveredByCallback(ctx);
                }
            }
        }
        if (adaptForDeletes) {
            String dbDeleteFunctionName = "deleteItem";
            if (ctx.getText().contains(dbDeleteFunctionName)) {
                if (GraphHelper.checkIfFunctionIsInvoked(ctx, dbDeleteFunctionName)) {
                    ArgumentContext deleteParameter = GraphHelper.getFirstArgument(ctx);
                    if (deleteParameter != null) {
                        addDefsForDelete(deleteParameter.getText());
                        changeParameterPassedToDelete(ctx, deleteParameter.getText());
                        String newNameOfDeleteFunction = "updateItem";
                        replaceDeleteOperation(ctx, dbDeleteFunctionName, newNameOfDeleteFunction);
                        addDependenciesForNodeType(ctx);
                    }
                }
            }
        }

        return super.visitStatement(ctx);
    }

    private void changeParameterPassedToDelete(StatementContext ctx, String deleteParameter) {
        var sourcecodeLine = getStartSourceCodeLineForContext(ctx);
        String enrichedLine =
                String.format("%s.UpdateExpression = 'set DeleteTracker = :myTracker';%n", deleteParameter);
        sourcecodeLine.setReplaceLine(enrichedLine);
    }


    private void replaceDeleteOperation(StatementContext ctx, String oldValue, String newValue) {
        var sourcecodeLine = getStartSourceCodeLineForContext(ctx);
        String alternativeLine = sourcecodeLine.getSourceLine().replace(oldValue, newValue);
        SourceCodeLine sourceCodeLine = getStartSourceCodeLineForContext(ctx);
        String oldReplaceLine = sourcecodeLine.getReplaceLine();
        sourceCodeLine.setReplaceLine(oldReplaceLine + alternativeLine);
    }

    private void addRelationsCoveredFunctionCall(StatementContext ctx) {
        var nodeOptional = graph.findNodeByID(idOfNode);
        if (nodeOptional.isPresent()) {
            var node = nodeOptional.get();
            var arrows = node.getOutgoingArrows();
            for (var arrow : arrows) {
                var successor = arrow.getSuccessorNode();
                if (NodeType.FUNCTION.equals(successor.getType())) {
                    SourceCodeLine sourceCodeLine = getStartSourceCodeLineForContext(ctx);
                    if (!arrow.hasAccessMode(AccessMode.RETURN)) {
                        sourceCodeLine.addRelationCoveredByStatement(arrow.getIdentifier());
                    }
                }
            }
        }
    }

    private void addNodesAndRelationsCoveredByCallback(StatementContext ctx) {
        var nodeOptional = graph.findNodeByID(idOfNode);
        if (nodeOptional.isPresent()) {
            var node = nodeOptional.get();
            var arrows = node.getOutgoingArrows();
            for (var arrow : arrows) {
                var successor = arrow.getSuccessorNode();
                if (NodeType.FUNCTION.equals(successor.getType())) {
                    SourceCodeLine sourceCodeLine = getStartSourceCodeLineForContext(ctx);
                    if (arrow.hasAccessMode(AccessMode.RETURN)) {
                        sourceCodeLine.addRelationCoveredByStatement(arrow.getIdentifier());
                    }
                }
            }
        }
    }

    private void addDependenciesForNodeType(StatementContext ctx) {
        var nodeOptional = graph.findNodeByID(idOfNode);
        if (nodeOptional.isPresent()) {
            var node = nodeOptional.get();
            var arrows = node.getOutgoingArrows();
            for (var arrow : arrows) {
                var successor = arrow.getSuccessorNode();
                if (NodeType.DATA_STORAGE.equals(successor.getType())) {
                    SourceCodeLine sourceCodeLine = getStartSourceCodeLineForContext(ctx);
                    if (!NodeType.FUNCTION.equals(successor.getType())) {
                        sourceCodeLine.addNodeCoveredByStatement(successor.getIdentifier());
                    }
                    sourceCodeLine.addRelationCoveredByStatement(arrow.getIdentifier());
                }
            }
        }
    }

    private SourceCodeLine getStartSourceCodeLineForContext(StatementContext context) {
        return lines.get(context.start.getLine() - 1);
    }

    private SourceCodeLine getEndSourceCodeLineForContext(StatementContext context) {
        return lines.get(context.stop.getLine() - 1);
    }

    @Override
    public T visitIdentifier(IdentifierContext ctx) {
        defManager.addPotentialRedefinition(ctx, lines);
        if (useVariablesOfReads.containsKey(ctx.getText())) {
            if (GraphHelper.isIdentifierUsage(ctx)) {
                if (adaptForDeletes) {
                    addUsesForReadsIfDeleteActive(ctx, ctx.getText());
                } else {
                    addUsesForRead(ctx, ctx.getText());
                }
            }
        }
        if (useVariablesOfEvents.containsKey(ctx.getText())) {
            if (GraphHelper.isIdentifierUsage(ctx)) {
                addUsesForEvents(ctx, ctx.getText());
            }
        }
        if (useVariablesOfReturns.containsKey(ctx.getText())) {
            if (GraphHelper.isIdentifierUsage(ctx)) {
                addUsesForReturns(ctx, ctx.getText());
            }
        }
        return super.visitIdentifier(ctx);
    }

    @Override
    public T visitVariableDeclaration(JavaScriptParser.VariableDeclarationContext ctx) {

        String varName = GraphHelper.getVariableNameOfDefinition(ctx);
        StatementContext statement = GraphHelper.getStatementOfContext(ctx);
        if (statement != null && varName != null) {
            defManager.addFirstDefinition(varName, statement);
        }
        return super.visitVariableDeclaration(ctx);
    }

    private void addUsesForEvents(IdentifierContext ctx, String useVar) {
        var statementOptional = GraphHelper.getStatementOfContext2(ctx);
        if (statementOptional.isPresent()) {
            var statement = statementOptional.get();
            var sourcecodeLine = getStartSourceCodeLineForContext(statement);
            String tracker = sourcecodeLine.getUseTracker("", idOfNode);
            String useTracker = String.format("console.log(%s.DefTracker + \"%s\");", useVar, tracker);
            sourcecodeLine.setUse(useTracker);
            var relations = getRelationsInfluencingUseOfEvent();
            sourcecodeLine.setRelationsInfluencingUse(relations);
        }
    }

    private void addUsesForRead(IdentifierContext ctx, String useVar) {
        var statementOptional = GraphHelper.getStatementOfContext2(ctx);
        if (statementOptional.isPresent()) {
            var statement = statementOptional.get();
            var sourcecodeLine = getStartSourceCodeLineForContext(statement);
            String tracker = sourcecodeLine.getUseTracker("", idOfNode);

            String useTracker = String.format("console.log(%s?.Item?.DefTracker?.S + \"%s\");"
                    , useVar, tracker);
            sourcecodeLine.setUse(useTracker);
            var relations = getRelationsInfluencingUseOfRead();
            sourcecodeLine.setRelationsInfluencingUse(relations);
        }
    }

    private void addUsesForReadsIfDeleteActive(IdentifierContext ctx, String useVar) {
        var statementOptional = GraphHelper.getStatementOfContext2(ctx);
        if (statementOptional.isPresent()) {
            var statement = statementOptional.get();
            var sourcecodeLine = getStartSourceCodeLineForContext(statement);
            String tracker = sourcecodeLine.getUseTracker("", idOfNode);
            String useTracker = String.format(
                    """
                            {%s = (dataBackup == undefined) ? %s : dataBackup;
                            let deleteTracker = %s?.Item?.DeleteTracker?.S;
                            let defTracker = %s?.Item?.DefTracker?.S;
                            if(deleteTracker != undefined){
                            \tif(defTracker == undefined){
                            \t\tconsole.log(deleteTracker + "%s");
                            \t}\telse {
                            \t\tconsole.log(defTracker + deleteTracker + "%s");
                            \t}var dataBackup = data;
                            \t%s = {};
                            }else{
                            \tconsole.log(%s?.Item?.DefTracker?.S + "%s");
                            }}"""
                    , useVar, useVar, useVar, useVar, tracker, tracker, useVar, useVar, tracker);
            sourcecodeLine.setUse(useTracker);
            var relations = getRelationsInfluencingUseOfRead();
            sourcecodeLine.setRelationsInfluencingUse(relations);
        }
    }


    private void addUsesForReturns(IdentifierContext ctx, String useVar) {
        var statementOptional = GraphHelper.getStatementOfContext2(ctx);
        if (statementOptional.isPresent()) {
            var statement = statementOptional.get();
            var sourcecodeLine = getStartSourceCodeLineForContext(statement);
            String tracker = sourcecodeLine.getUseTracker("", idOfNode);
            String useTracker = String.format("console.log(JSON.parse(%s.Payload)[\"DefTracker\"] + \"%s\");", useVar, tracker);
            sourcecodeLine.setUse(useTracker);
            var relations = getRelationsInfluencingUseOfCallback();
            sourcecodeLine.setRelationsInfluencingUse(relations);
        }
    }

    private List<Long> getRelationsInfluencingUseOfCallback() {
        var nodeOptional = graph.findNodeByID(idOfNode);
        var neighboursArrows = new ArrayList<Long>();
        if (nodeOptional.isPresent()) {
            var node = nodeOptional.get();
            var arrows = node.getIncomingArrows();
            for (var arrow : arrows) {
                var predecessorNode = arrow.getPredecessorNode();
                if (NodeType.FUNCTION.equals(predecessorNode.getType()) && arrow.hasAccessMode(AccessMode.RETURN)) {
                    neighboursArrows.add(arrow.getIdentifier());
                }
            }
        }
        return neighboursArrows;
    }

    private List<Long> getRelationsInfluencingUseOfEvent() {
        var nodeOptional = graph.findNodeByID(idOfNode);
        var neighboursArrows = new ArrayList<Long>();
        if (nodeOptional.isPresent()) {
            var node = nodeOptional.get();
            var arrows = node.getIncomingArrows();
            for (var arrow : arrows) {
                if (!arrow.hasAccessMode(AccessMode.RETURN)) {
                    neighboursArrows.add(arrow.getIdentifier());
                }
            }
        }
        return neighboursArrows;
    }

    private List<Long> getRelationsInfluencingUseOfRead() {
        var nodeOptional = graph.findNodeByID(idOfNode);
        var neighboursArrows = new ArrayList<Long>();
        if (nodeOptional.isPresent()) {
            var node = nodeOptional.get();
            var arrows = node.getOutgoingArrows();
            for (var arrow : arrows) {
                var successor = arrow.getSuccessorNode();
                if (NodeType.DATA_STORAGE.equals(successor.getType()) && arrow.hasAccessMode(AccessMode.READ)) {
                    neighboursArrows.add(arrow.getIdentifier());
                }
            }
        }
        return neighboursArrows;
    }

    private void addDefsForCallbacks(String parameterOfReturn) {
        if (defManager.wasParameterDefined(parameterOfReturn)) {
            Set<StatementContext> defsToBeInstrumented = defManager.getAllDefinitions(parameterOfReturn);
            for (StatementContext statement : defsToBeInstrumented) {
                var sourcecodeLine = getEndSourceCodeLineForContext(statement);
                String tracker = sourcecodeLine.getDefTracker("", idOfNode);
                String defTracker = String.format("%s.DefTracker=\"%s\";", parameterOfReturn, tracker);
                sourcecodeLine.setDefKey(defTracker);
                addDRelationDependencyEntryToSuccessorCallbacks(sourcecodeLine);
            }
        }
    }

    private void addRelationDependencyEntryToSuccessorFunctions(SourceCodeLine sourcecodeLine) {
        var nodeOptional = graph.findNodeByID(idOfNode);
        if (nodeOptional.isPresent()) {
            var neighboursArrows = new ArrayList<Long>();
            var node = nodeOptional.get();
            var arrows = node.getOutgoingArrows();
            for (var arrow : arrows) {
                var successorNode = arrow.getSuccessorNode();
                if (NodeType.FUNCTION.equals(successorNode.getType()) && !arrow.hasAccessMode(AccessMode.RETURN)) {
                    neighboursArrows.add(arrow.getIdentifier());
                }
            }
            sourcecodeLine.setRelationsInfluencedByDef(neighboursArrows);
        }
    }

    private void addDRelationDependencyEntryToSuccessorCallbacks(SourceCodeLine sourcecodeLine) {
        var nodeOptional = graph.findNodeByID(idOfNode);
        if (nodeOptional.isPresent()) {
            var neighboursArrows = new ArrayList<Long>();
            var node = nodeOptional.get();
            var arrows = node.getOutgoingArrows();
            for (var arrow : arrows) {
                var successorNode = arrow.getSuccessorNode();
                if (NodeType.FUNCTION.equals(successorNode.getType()) && arrow.hasAccessMode(AccessMode.RETURN)) {
                    neighboursArrows.add(arrow.getIdentifier());
                }
            }
            sourcecodeLine.setRelationsInfluencedByDef(neighboursArrows);
        }
    }

    private void addDefsForWrite(String writeParameter) {
        addDefInTemplate(writeParameter, "%s.Item.DefTracker={S : \"%s\"};");
    }

    private void addDefsForDelete(String deleteParameter) {
        addDefInTemplate(deleteParameter, "%s.ExpressionAttributeValues  = {\":myTracker\": {\"S\": \"%s\"}};");
    }

    private void addDefInTemplate(String parameter, String logTemplate) {
        if (defManager.wasParameterDefined(parameter)) {
            Set<StatementContext>
                    defsToBeInstrumented = defManager.getAllDefinitions(parameter);
            for (StatementContext statement : defsToBeInstrumented) {
                var sourcecodeLine = getEndSourceCodeLineForContext(statement);
                String tracker = sourcecodeLine.getDefTracker("", idOfNode);
                String defTracker = String.format(logTemplate, parameter, tracker);
                applyDefTextToLine(sourcecodeLine, defTracker);
            }
        }
    }


    private void applyDefTextToLine(SourceCodeLine sourcecodeLine, String defTracker) {
        sourcecodeLine.setDefKey(defTracker);
        var nodeOptional = graph.findNodeByID(idOfNode);
        if (nodeOptional.isPresent()) {
            var neighboursArrows = new ArrayList<Long>();
            var node = nodeOptional.get();
            var arrows = node.getOutgoingArrows();
            for (var arrow : arrows) {
                var successorNode = arrow.getSuccessorNode();
                if (NodeType.DATA_STORAGE.equals(successorNode.getType())) {
                    neighboursArrows.add(arrow.getIdentifier());
                }
            }
            sourcecodeLine.setRelationsInfluencedByDef(neighboursArrows);
        }
    }


    private void addDefinitionForFunctionCall(String lambdaParameter) {
        if (defManager.wasParameterDefined(lambdaParameter)) {
            Set<StatementContext> defsToBeInstrumented = defManager.getAllDefinitions(lambdaParameter);
            for (StatementContext statement : defsToBeInstrumented) {
                var payloadOptional = GraphHelper.hasStatementPayload(statement);
                if (payloadOptional.isPresent()) {
                    var payload = payloadOptional.get();
                    String jsonContent = GraphHelper.getJSONForPayload(payload);
                    if (!jsonContent.isBlank()) {
                        var sourcecodeLine = getEndSourceCodeLineForContext(statement);
                        StringBuilder builder = new StringBuilder();
                        String tracker = sourcecodeLine.getDefTracker("", idOfNode);
                        builder.append(String.format(
                                "var content = JSON.parse(%s.Payload); content.DefTracker=\"%s\";%s.Payload=JSON.stringify(content);",
                                lambdaParameter, tracker, lambdaParameter));
                        sourcecodeLine.setDefKey(builder.toString());
                        addRelationDependencyEntryToSuccessorFunctions(sourcecodeLine);
                    }
                }
            }
        }
    }

}