package logic.sourcecodeanalyzer;

import antlr.autogenerated.JavaScriptParser;
import antlr.autogenerated.JavaScriptParser.StatementContext;
import logic.model.SourceCodeLine;
import org.antlr.v4.runtime.ParserRuleContext;

import java.util.*;

public class DefManager {
    public final Map<String, Set<StatementContext>> potentialDefs = new HashMap<>();


    public void addPotentialRedefinition(JavaScriptParser.IdentifierContext ctx, List<SourceCodeLine> lines) {
        if (potentialDefs.containsKey(ctx.getText())) {
            if (GraphHelper.isIdentifierDefinition(ctx)) {
                Set<StatementContext> listOfDefs = potentialDefs.get(ctx.getText());
                JavaScriptParser.StatementContext statement = GraphHelper.getStatementOfContext(ctx);
                if (statement != null) {
                    removeDefsInSameBlockWithoutDefinition(listOfDefs, statement, lines);
                    listOfDefs.add(statement);
                }
            }

        }
    }

    private void removeDefsInSameBlockWithoutDefinition(Set<StatementContext> listOfDefs, StatementContext statement, List<SourceCodeLine> lines) {
        var rootOfNewDef = getRootOfStatement(statement);
        if (rootOfNewDef.isPresent()) {
            Iterator<StatementContext> it = listOfDefs.iterator();
            while (it.hasNext()) {
                var rootOfOtherDef = getRootOfStatement(it.next());
                if (rootOfOtherDef.isPresent() && rootOfOtherDef.get() == rootOfNewDef.get() && isDefinitionNotApplied(rootOfOtherDef.get(), lines)) {
                    it.remove();
                }
            }
        }
    }

    private Optional<ParserRuleContext> getRootOfStatement(StatementContext statement) {
        ParserRuleContext root = statement;
        while (root.getParent() != null) {
            root = root.getParent();
            if (root instanceof JavaScriptParser.StatementListContext) {
                return Optional.of(root);
            }
        }
        return Optional.empty();
    }

    public void addFirstDefinition(String varName, StatementContext statement) {
        Set<StatementContext> statementsOfDefs = new HashSet<>();
        statementsOfDefs.add(statement);
        potentialDefs.put(varName, statementsOfDefs);
    }

    public boolean wasParameterDefined(String parameterOfReturn) {
        return potentialDefs.containsKey(parameterOfReturn);
    }

    public Set<StatementContext> getAllDefinitions(String parameterOfReturn) {
        return potentialDefs.get(parameterOfReturn);
    }

    private boolean isDefinitionNotApplied(ParserRuleContext context, List<SourceCodeLine> lines) {
        var startLine = lines.get(context.start.getLine() - 1);
        var endLine = lines.get(context.stop.getLine() - 1);
        return startLine.getDefContainer() == null && endLine.getDefContainer() == null;
    }


}
